{"version":3,"sources":["logo.svg","app/hooks.ts","store/features/counter/counterSelectors.ts","store/features/counter/counterAPI.ts","store/features/counter/counterActions.ts","store/features/counter/counterSlice.ts","components/atoms/counter/Counter.tsx","App.tsx","store/store.ts","serviceWorker.ts","index.tsx","components/atoms/counter/Counter.module.scss"],"names":["useAppSelector","useSelector","selectCount","state","counter","value","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","status","reducers","increment","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","counterReducer","reducer","Counter","count","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","incrementValue","Number","className","styles","row","button","aria-label","onClick","textbox","onChange","e","target","asyncButton","getState","App","src","logo","alt","href","rel","store","configureStore","Boolean","window","location","hostname","exec","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.ba3b9ff9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store/store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { RootState } from '../../store';\n\nexport const selectCount = (state: RootState) => state.counter.value;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { AppThunk } from '../../store';\nimport { selectCount } from './counterSelectors';\nimport { incrementByAmount } from './counterSlice';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nexport const incrementIfOdd = (amount: number): AppThunk => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => {\n  const response = await fetchCount(amount);\n  return response.data;\n});\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { incrementAsync } from './counterActions';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle'\n};\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  }\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\nexport const counterReducer = counterSlice.reducer;\n","import React, { useState } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../../app/hooks';\nimport {\n  decrement,\n  increment,\n  incrementByAmount\n} from '../../../store/features/counter/counterSlice';\nimport styles from './Counter.module.scss';\nimport { selectCount } from '../../../store/features/counter/counterSelectors';\nimport { incrementAsync, incrementIfOdd } from '../../../store/features/counter/counterActions';\n\nexport function Counter() {\n  const count = useAppSelector(selectCount);\n  const dispatch = useAppDispatch();\n  const [incrementAmount, setIncrementAmount] = useState('2');\n  const incrementValue = Number(incrementAmount) || 0;\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n      </div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\n        >\n          Add Amount\n        </button>\n        <button\n          className={styles.asyncButton}\n          onClick={() => dispatch(incrementAsync(incrementValue))}\n        >\n          Add Async\n        </button>\n        <button className={styles.button} onClick={() => dispatch(incrementIfOdd(incrementValue))}>\n          Add If Odd\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Counter } from './components/atoms/counter/Counter';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Counter />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <span>\n          <span>Learn </span>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React\n          </a>\n          <span>, </span>\n          <a\n            className=\"App-link\"\n            href=\"https://redux.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux\n          </a>\n          <span>, </span>\n          <a\n            className=\"App-link\"\n            href=\"https://redux-toolkit.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux Toolkit\n          </a>\n          ,<span> and </span>\n          <a\n            className=\"App-link\"\n            href=\"https://react-redux.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React Redux\n          </a>\n        </span>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { counterReducer } from './features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer\n  }\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/.exec(window.location.hostname)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__2SpDR\",\"value\":\"Counter_value__3A4le\",\"button\":\"Counter_button__36jP_\",\"textbox\":\"Counter_textbox__NPkJd\",\"asyncButton\":\"Counter_asyncButton__1U0DJ Counter_button__36jP_\"};"],"sourceRoot":""}